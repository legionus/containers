#!/bin/ash -efu

. shell-error
. shell-signal

. ./functions

pid="$$"
dockerspec="$1"

scope="pull"
[ "$#" = 0 ] || { scope="$1"; shift; }

parse_imagespec

exit_handler()
{
	find "$dbdir" -name "$pid.*" -delete
}

get_auth_challenge()
{
	sed -r \
		-e 's/^Www-Authenticate: Bearer (.*)\r$/\1/i' \
		-e 't a' \
		-e 'd' \
		-e ': a' \
		-e 's/,?([^[:space:],=]+="[^"]+")/\1 /g'
}

get_token_v2()
{
	local n realm service

	realm=
	service=

	for n in $(curl -sL -o /dev/null -D- "https://$docker_host/v2/" | get_auth_challenge); do
		[ -n "$realm" ] || [ -n "${n##realm=*}" ] || {
			realm="${n#realm=\"}"
			realm="${realm%\"}"
		}
		[ -n "$service" ] || [ -n "${n##service=*}" ] || {
			service="${n#service=\"}"
			service="${service%\"}"
		}
	done

	[ -n "$realm" ] && [ -n "$service" ] ||
		fatal "unable to parse auth challenge"

	curl -sL "$realm?service=$service&scope=repository:$repo:$scope" |
		jq -r .token
}

token=

pull_v2()
{
	local headers= status= url_suffix="$1" outfile="$2"

	headers="$(mktemp "$imagedir/$repo/$tag/$pid.HEADERS.XXXXXXXXX")" ||
		return 1

	while :; do
		:> "$headers"

		curl -sL \
			-H "Accept: application/vnd.docker.distribution.manifest.v1+json" \
			-H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
			${token:+-H "Authorization: Bearer $token"} \
			-D "$headers" -o "$outfile" \
			"https://$docker_host/v2/$repo/$url_suffix" ||:

		status="$(sed -n -r -e 's,^HTTP/1.1 ([0-9]+) .*$,\1,p' "$headers")"
		status="${status##*
}"
		case "$status" in
			2*)
				break
				;;
			401)
				message "Got $status and need to get new token..."
				;;
			4*|5*)
				message "Got $status fatal error..."
				return 1
				;;
			*)
				message "Unknown error"
				return 1
				;;
		esac

		token="$(get_token_v2)"
	done
}

pull_manifest()
{
	pull_v2 "manifests/$1" "$2"
}

pull_blob()
{
	pull_v2 "blobs/$1" "$2"
}

check_digest()
{
	local checksum digest="$1" file="$2"
	case "$digest" in
		sha256:*)
			checksum="$(sha256sum < "$file")"
			checksum="${checksum%% *}"
			;;
		*)
			message "unsupported digest: ${digest%%:*}"
			return 1
			;;
	esac
	[ "$checksum" = "${digest#*:}" ] ||
		return 1
}

set_cleanup_handler exit_handler

message "pulling $repo:$tag ($scope)"
mkdir -p -- "$blobdir" "$imagedir/$repo/$tag"

message "fetching manifest ..."

manifest="$(mktemp "$imagedir/$repo/$tag/$pid.XXXXXXXXX")"
pull_manifest "$tag" "$manifest"

layerlist="$imagedir/$repo/$tag/$pid.layers.list"

version="$(jq -r .schemaVersion "$manifest")"
case "$version" in
	1) jq -r .fsLayers[].blobSum "$manifest" ;;
	2) jq -r .layers[].digest    "$manifest" ;;
	*)
		fatal "unsupported manifest version: $version"
		;;
esac >"$layerlist"

while read digest; do
	if [ -s "$blobdir/$digest" ]; then
		message "fetching $digest (already have it) ..."
		continue
	fi

	message "fetching $digest ..."
	payload="$(mktemp "$blobdir/$pid.XXXXXXXXX")"

	pull_blob "$digest" "$payload"

	check_digest "$digest" "$payload" ||
		fatal "digest verification failed: $digest"

	mv -f -- "$payload" "$blobdir/$digest"

done <"$layerlist"

mv -f -- "$layerlist" "$imagedir/$repo/$tag/layers.list"
mv -f -- "$manifest"  "$imagedir/$repo/$tag/manifest.json"
